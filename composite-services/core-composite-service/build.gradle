import org.gradle.api.tasks.JavaExec

buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
        springCloudVersion = 'Finchley.M9'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

jar {
    baseName = 'user-service'
    version = '0.0.1'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-webflux')

    compile("org.springframework.cloud:spring-cloud-starter-config")
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    compile("org.springframework.boot:spring-boot-starter-undertow")
    compile("org.springframework.boot:spring-boot-starter-actuator")

    compile('org.springframework.cloud:spring-cloud-starter-bus-amqp')
//    compile('org.springframework.cloud:spring-cloud-starter-stream-rabbit')



    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
    compile('org.springframework.cloud:spring-cloud-netflix-hystrix-stream')

//Ext libraries
    compile ("com.nghia.tut.utils:nghia-libraries:1.0"){
        exclude module: 'spring-boot-starter-data-mongodb'
        exclude module: 'spring-boot-starter-amqp'
        exclude module: 'spring-boot-starter-tomcat'
    }
    runtime('org.springframework.boot:spring-boot-devtools')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('io.projectreactor:reactor-test')

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.withType(JavaExec) {
    if (System.getProperty('debug', '0') == '1') {
        jvmArgs '-Xdebug', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005'
    }
}


//task qa {
//    doLast {
//        bootRun { systemProperty "spring.profiles.active", "qa" }
//    }
//    qa.finalizedBy bootRun
//}